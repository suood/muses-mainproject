<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
       <context:component-scan base-package="com.muses.service">
       <context:exclude-filter type="annotation"
                               expression="org.springframework.stereotype.Controller" />
       </context:component-scan>

       <!--<bean id="dataSourceAdvice" class="cn.nl.express.database.DataSourceAdvice" />-->
       <!--<aop:config>-->
              <!--<aop:advisor-->
                      <!--pointcut="execution(* cn.nl.express.service.*.*(..))"-->
                      <!--advice-ref="dataSourceAdvice" />-->
       <!--</aop:config>-->
       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <tx:method name="find*" read-only="true" />
                     <tx:method name="load*" read-only="true" />
                     <tx:method name="search*" read-only="true" />
                     <tx:method name="put*" read-only="true"/>
                     <tx:method name="query*" read-only="true"/>
                     <tx:method name="use*" read-only="true"/>
                     <tx:method name="get*" read-only="true" />
                     <tx:method name="count*" read-only="true" />
                     <tx:method name="list*" read-only="true" />
                     <tx:method name="*"  />
                     <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
                     <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
                     <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
                     <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
                     <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
                     <tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception"/>
                     <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
                     <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
              </tx:attributes>
       </tx:advice>

       <aop:config proxy-target-class="true" expose-proxy="true">
              <aop:pointcut id="serviceOperation"
                            expression="execution(* com.muses.service.*.*(..))" />
              <aop:advisor pointcut-ref="serviceOperation"
                           advice-ref="txAdvice" />
       </aop:config>

       <!---->
       <aop:aspectj-autoproxy proxy-target-class="true"/>
       <bean id="aspectServiceTools" class="com.muses.slowquery.SlowQueryServiceTools"/>


       <context:property-placeholder location="classpath:jdbc.properties" />
       <!-- 配置c3p0数据源 -->

       <!--<bean id="dataSource" class="cn.nl.express.database.DynamicDataSource">-->
       <!--<property name="targetDataSources">-->
       <!--<map key-type="java.lang.String">-->
       <!--<entry key="slave" value-ref="slaveDataSource" />-->
       <!--</map>-->
       <!--</property>-->
       <!--<property name="defaultTargetDataSource" ref="masterDataSource" />-->
       <!--</bean>-->
       <bean id="dataSource"   class="com.mchange.v2.c3p0.ComboPooledDataSource"        destroy-method="close">
              <property name="driverClass" value="${c3p0.driverClass}"/>
              <property name="jdbcUrl" value="${c3p0.url}"/>
              <property name="user"  value="${c3p0.user}"/>
              <property name="password" value="${c3p0.password}"/>

              <!--连接池中保留的最小连接数。-->
              <property name="minPoolSize" value="${c3p0.minPoolSize}"/>

              <!--连接池中保留的最大连接数。Default: 15 -->
              <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />

              <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
              <property name="initialPoolSize" value="${c3p0.initialPoolSize}">
              </property>

              <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
              <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />

              <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
              <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />

              <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
                属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
                如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
              <property name="maxStatements" value="${c3p0.maxStatements}" />

              <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
              <!--<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>-->

              <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
              <!--<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>-->

              <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
                保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
                获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
              <!--<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"/>-->
       </bean>
       <!--<bean id="masterDataSource"   class="com.mchange.v2.c3p0.ComboPooledDataSource"        destroy-method="close">-->
       <!--<property name="driverClass" value="${c3p0.driverClass}"/>-->
       <!--<property name="jdbcUrl" value="${c3p0.url}"/>-->
       <!--<property name="user"  value="${c3p0.user}"/>-->
       <!--<property name="password" value="${c3p0.password}"/>-->

       <!--&lt;!&ndash;连接池中保留的最小连接数。&ndash;&gt;-->
       <!--<property name="minPoolSize" value="${c3p0.minPoolSize}"/>-->

       <!--&lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;-->
       <!--<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />-->

       <!--&lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;-->
       <!--<property name="initialPoolSize" value="${c3p0.initialPoolSize}">-->
       <!--</property>-->

       <!--&lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;-->
       <!--<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />-->

       <!--&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;-->
       <!--<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />-->

       <!--&lt;!&ndash;JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements-->
       <!--属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。-->
       <!--如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0&ndash;&gt;-->
       <!--<property name="maxStatements" value="${c3p0.maxStatements}" />-->

       <!--&lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0 &ndash;&gt;-->
       <!--&lt;!&ndash;<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>&ndash;&gt;-->

       <!--&lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 &ndash;&gt;-->
       <!--&lt;!&ndash;<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>&ndash;&gt;-->

       <!--&lt;!&ndash;获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效-->
       <!--保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试-->
       <!--获取连接失败后该数据源将申明已断开并永久关闭。Default: false&ndash;&gt;-->
       <!--&lt;!&ndash;<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"/>&ndash;&gt;-->
       <!--</bean>-->

       <!--<bean id="slaveDataSource"   class="com.mchange.v2.c3p0.ComboPooledDataSource"        destroy-method="close">-->
       <!--<property name="driverClass" value="${c3p0.driverClass}"/>-->
       <!--<property name="jdbcUrl" value="${slave.c3p0.url}"/>-->
       <!--<property name="user"  value="${slave.c3p0.user}"/>-->
       <!--<property name="password" value="${slave.c3p0.password}"/>-->

       <!--&lt;!&ndash;连接池中保留的最小连接数。&ndash;&gt;-->
       <!--<property name="minPoolSize" value="${c3p0.minPoolSize}"/>-->

       <!--&lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;-->
       <!--<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />-->

       <!--&lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;-->
       <!--<property name="initialPoolSize" value="${c3p0.initialPoolSize}">-->
       <!--</property>-->

       <!--&lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;-->
       <!--<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />-->

       <!--&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;-->
       <!--<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />-->

       <!--&lt;!&ndash;JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements-->
       <!--属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。-->
       <!--如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0&ndash;&gt;-->
       <!--<property name="maxStatements" value="${c3p0.maxStatements}" />-->

       <!--&lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0 &ndash;&gt;-->
       <!--&lt;!&ndash;<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>&ndash;&gt;-->

       <!--&lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 &ndash;&gt;-->
       <!--&lt;!&ndash;<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>&ndash;&gt;-->

       <!--&lt;!&ndash;获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效-->
       <!--保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试-->
       <!--获取连接失败后该数据源将申明已断开并永久关闭。Default: false&ndash;&gt;-->
       <!--&lt;!&ndash;<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"/>&ndash;&gt;-->
       <!--</bean>-->

       <!--&lt;!&ndash; AOP配置事物 &ndash;&gt;-->
       <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
       <!--<tx:attributes>-->
       <!--<tx:method name="query*" read-only="true" propagation="REQUIRED" />-->
       <!--<tx:method name="delete*"  propagation="REQUIRED" />-->
       <!--<tx:method name="update*" propagation="REQUIRED" />-->
       <!--<tx:method name="insert*" propagation="REQUIRED" />-->
       <!--<tx:method name="*" propagation="REQUIRED" />-->
       <!--</tx:attributes>-->
       <!--</tx:advice>-->
       <!---->
       <!--&lt;!&ndash; 配置AOP切面 &ndash;&gt;-->
       <!--<aop:config>-->
       <!--<aop:pointcut id="transactionPointcut" expression="execution(* cn.soften.express.service.*.*(..))"/>-->
       <!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>-->
       <!--</aop:config>-->


       <!-- 使用annotation注解方式配置事务 -->
       <!--<tx:annotation-driven transaction-manager="transactionManager" />-->

       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" >
                     <ref bean="dataSource" />
              </property>
              <property name="configLocation" value="classpath:mybatis-config.xml" />
       </bean>
       <context:component-scan base-package="com.muses.data.mapper" />
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <!--可用,或者;分割多个扫描的包-->
              <property name="basePackage" value="com.muses.data.mapper" />
       </bean>



       <bean id="transactionManager"
             class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource">
                     <ref bean="dataSource" />
              </property>
       </bean>
       <!--<import resource="spring-app.xml" />-->
</beans>